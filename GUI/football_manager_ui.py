# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo_football_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import QDate, Qt, QAbstractTableModel, QPointF

from PyQt5.QtChart import QChart, QChartView, QPieSeries, QPieSlice
import matplotlib.pyplot as plt
import numpy as np
import copy as cp
import pandas as pd

from datetime import date, datetime


class defaultLst:
    def __init__(self):
        super().__init__()
        self.lstViTri = ['Thủ Môn', 'Hậu Vệ', 'Tiền Vệ', 'Tiền Đạo']
        self.lstLabel = ['Họ và Tên', 'Ngày Sinh', 'Vị Trí', 'Câu Lạc Bộ', 'Số Áo']
        self.lstDoiTuyen = ['Việt Nam', 'UAE', 'Thái Lan', 'Malaysia', 'Indonesia']
        self.lstClear = ['Xóa tất cả', 'Lựa chọn dòng']
        self.lstQA = ['Tất cả cầu thủ',
                      'Có <tuổi> lớn hơn',
                      'Có <vị trí> <đội tuyển>']


class MainDisplay(QWidget, defaultLst):
    def __init__(self):
        super().__init__()
        self.layoutVerLeft = QVBoxLayout()
        self.items = 0
        self.flag = 0
        self._data = {}
        self._path_file = None
        self.df = None
        self.secondWindows = None
        self.dialog = None
        self.browsefname = None

        self.table = QTableWidget()
        self.labelImage = QLabel()
        self.layoutHor = QHBoxLayout()
        self.layoutHLeft = QVBoxLayout()
        self.layoutHRight = QVBoxLayout()
        self.chartView = QChartView()

        self.lineEditName = QLineEdit()
        self.lineEditBirth = QDateEdit()
        self.lineEditPos = QComboBox()
        self.lineEditClub = QComboBox()
        self.lineEditNumber = QLineEdit()

        self.comboBoxClear = QComboBox()
        self.comboBoxQA = QComboBox()
        self.buttonAdd = QPushButton('Thêm')
        self.buttonQuit = QPushButton('Thoát')
        self.buttonPlot = QPushButton('Vẽ biểu đồ')
        self.buttonEdit = QPushButton('Bật/Tắt Chỉnh Sửa')
        self.buttonSaveImg = QPushButton('Lưu Biểu Đồ')
        self.buttonSaveFile = QPushButton('Lưu Database')
        self.buttonClear = QPushButton('Xóa')
        self.buttonQA = QPushButton('Q&A')
        self.buttonOpenFile = QPushButton('Open File')

        # Layout Horizontal Left
        self.layoutHorizonLeft()
        # Layout Horizontal Right
        self.layoutHorizonRight()

        self.layoutHor.addLayout(self.layoutHLeft, stretch=4)
        self.layoutHor.addLayout(self.layoutHRight, stretch=3)
        self.setLayout(self.layoutHor)

    def layoutHorizonLeft(self):
        # Define Widget as you want
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(self.lstLabel)
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignHCenter)

        # Define Vertical Box
        layoutVerLeft = QVBoxLayout()
        # Image add Widget
        layoutVerLeft.addWidget(self.labelImage, alignment=Qt.AlignCenter)
        self.labelImage.setPixmap(QPixmap('football-manager-2021.jpg'))
        # Table add Widget
        layoutVerLeft.addWidget(self.table)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        # Add Layout
        self.layoutHLeft.addLayout(layoutVerLeft)

    def layoutHorizonRight(self):
        # Define Verical Box
        layoutVerRight = QVBoxLayout()

        # Tạo combo box clear
        self.comboBoxClear.addItems(self.lstClear)
        self.comboBoxClear.setEditable(True)
        self.comboBoxClear.setFixedHeight(35)

        self.comboBoxQA.addItems(self.lstQA)
        self.comboBoxQA.setEditable(True)
        self.comboBoxQA.setFixedHeight(35)

        lineEditComboClear = self.comboBoxClear.lineEdit()
        lineEditComboClear.setAlignment(Qt.AlignCenter)
        lineEditComboClear.setReadOnly(True)

        lineEditComboQA = self.comboBoxQA.lineEdit()
        lineEditComboQA.setAlignment(Qt.AlignCenter)
        lineEditComboQA.setReadOnly(True)

        # Cài đặt độ cao của các button
        self.buttonAdd.setFixedHeight(35)
        self.buttonEdit.setFixedHeight(35)

        self.buttonPlot.setFixedHeight(35)
        self.buttonQuit.setFixedHeight(35)

        self.buttonSaveImg.setFixedHeight(35)
        self.buttonSaveFile.setFixedHeight(35)

        self.buttonClear.setFixedHeight(35)
        self.comboBoxClear.setFixedHeight(35)

        self.buttonQA.setFixedHeight(35)
        self.comboBoxQA.setFixedHeight(35)

        self.buttonOpenFile.setFixedHeight(35)

        # Set button Thêm = False, để user nhập đầy đủ thông tin mới cho nhấn vào
        self.buttonAdd.setEnabled(False)

        # Khoảng cách giữa các khung nhập
        layoutVerRight.setSpacing(5)

        # Khung nhập thông tin
        layoutVerRight.addWidget(QLabel('Họ và Tên'))
        layoutVerRight.addWidget(self.lineEditName)
        self.lineEditName.setMaxLength(50)
        # Năm Sinh
        layoutVerRight.addWidget(QLabel('Năm Sinh'))
        layoutVerRight.addWidget(self.lineEditBirth)
        self.lineEditBirth.setDisplayFormat("dd/MM/yyyy")
        self.lineEditBirth.setCalendarPopup(True)
        self.lineEditBirth.setMinimumDate(QDate(1950, 1, 1))
        self.lineEditBirth.setMaximumDate(QDate(2050, 1, 1))
        self.lineEditBirth.setDateTime(QtCore.QDateTime.currentDateTime())
        # Vị Trí
        layoutVerRight.addWidget(QLabel('Vị Trí'))
        self.lineEditPos.addItems(self.lstViTri)
        layoutVerRight.addWidget(self.lineEditPos)
        # Câu Lạc Bộ
        layoutVerRight.addWidget(QLabel('Đội Tuyển'))
        self.lineEditClub.addItems(self.lstDoiTuyen)
        layoutVerRight.addWidget(self.lineEditClub)

        # Số áo
        layoutVerRight.addWidget(QLabel('Số Áo Thi Đấu'))
        layoutVerRight.addWidget(self.lineEditNumber)
        self.lineEditNumber.setValidator(QIntValidator())
        self.lineEditNumber.setMaxLength(2)

        # Nút nhấn lựa chọn chức năng
        layoutRight_AddEditSave = QHBoxLayout()
        layoutRight_AddEditSave.addWidget(self.buttonAdd, stretch=4)
        layoutRight_AddEditSave.addWidget(self.buttonEdit, stretch=3)
        layoutRight_AddEditSave.addWidget(self.buttonSaveImg, stretch=3)
        layoutRight_ClearSave = QHBoxLayout()
        layoutRight_ClearSave.addWidget(self.comboBoxClear, stretch=4)
        layoutRight_ClearSave.addWidget(self.buttonClear, stretch=3)
        layoutRight_ClearSave.addWidget(self.buttonSaveFile, stretch=3)
        layoutRight_QuitFile = QHBoxLayout()
        layoutRight_QuitFile.addWidget(self.buttonOpenFile, stretch=2)
        layoutRight_QuitFile.addWidget(self.buttonQuit, stretch=3)
        layoutRight_QAPlot = QHBoxLayout()
        layoutRight_QAPlot.addWidget(self.comboBoxQA, stretch=4)
        layoutRight_QAPlot.addWidget(self.buttonQA, stretch=3)
        layoutRight_QAPlot.addWidget(self.buttonPlot, stretch=3)

        # Set layout theo thứ tự từ trên xuống
        layoutVerRight.addLayout(layoutRight_AddEditSave)
        layoutVerRight.addLayout(layoutRight_ClearSave)
        layoutVerRight.addLayout(layoutRight_QAPlot)
        # chart widget
        self.chartView.setRenderHint(QPainter.Antialiasing)
        layoutVerRight.addWidget(self.chartView)

        layoutVerRight.addLayout(layoutRight_QuitFile)

        # Add Layout
        self.layoutHRight.addLayout(layoutVerRight)

        self.buttonQuit.clicked.connect(self.quit_message)
        self.buttonPlot.clicked.connect(self.graph_chart)
        self.buttonAdd.clicked.connect(self.add_entry)
        self.buttonEdit.clicked.connect(self.edit_database)
        self.buttonSaveImg.clicked.connect(self.export_img)
        self.buttonSaveFile.clicked.connect(self.export_db_file)
        self.buttonClear.clicked.connect(self.comboBox_Clear)
        self.buttonQA.clicked.connect(self.comboBox_QA)
        self.buttonOpenFile.clicked.connect(self.browseFile)

        self.lineEditName.textChanged[str].connect(self.check_disable)
        self.lineEditNumber.textChanged.connect(self.check_disable)

    def datetime(self):
        import datetime as dt
        time_zone = dt.datetime.now()
        current_time = (time_zone.strftime("%X")).replace(":", ".")
        time_file = time_zone.strftime("_%d-" + "%m-" + "%y_" + current_time)

        return time_file

    def edit_database(self):
        if self.flag == 0:
            self.table.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)
            self.flag = 1
        else:
            self.flag = 0
            self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

    def check_disable(self):
        if self.lineEditName.text() and \
                self.lineEditNumber.text():
            self.buttonAdd.setEnabled(True)
        else:
            self.buttonAdd.setEnabled(False)

    def add_entry(self):
        name = self.lineEditName.text()
        birth = self.lineEditBirth.text()
        position = self.lineEditPos.currentText()
        club = self.lineEditClub.currentText()
        number = self.lineEditNumber.text()

        try:
            # Add vào database table
            name = QTableWidgetItem(name)
            name.setTextAlignment(Qt.AlignCenter)
            birth = QTableWidgetItem('{}'.format(str(birth)))
            birth.setTextAlignment(Qt.AlignCenter)
            position = QTableWidgetItem(position)
            position.setTextAlignment(Qt.AlignCenter)
            club = QTableWidgetItem(club)
            club.setTextAlignment(Qt.AlignCenter)
            number = QTableWidgetItem(number)
            number.setTextAlignment(Qt.AlignCenter)

            lst = [name, birth, position, club, number]
            # Thêm vào database table
            rowNum = self.items
            self.table.insertRow(rowNum)
            for colNum in range(self.table.columnCount()):
                self.table.setItem(rowNum, colNum, lst[colNum])

            self.items += 1

            self.lineEditName.setText('')
            self.lineEditNumber.setText('')

        except ValueError:
            print("Something goes wrong")

    def clear_all_db(self):
        self.table.setRowCount(0)
        self.items = 0

        chart = QChart()
        self.chartView.setChart(chart)

    def clear_select_row(self):
        index_list = []
        if len(self.table.selectionModel().selectedRows()) > 0:
            for model_index in self.table.selectionModel().selectedRows():
                index = QtCore.QPersistentModelIndex(model_index)
                index_list.append(index)

            for index in index_list:
                self.table.removeRow(index.row())
                self.items -= 1

            if self.items <= 0:
                self.items = 0
        else:
            self.clear_all_db()

    def comboBox_Clear(self):
        if self.comboBoxClear.currentIndex() == 0:
            self.clear_all_db()
        else:
            self.clear_select_row()

    def comboBox_QA(self):
        obj = None
        result = []
        resultTuoi = []
        if self.df is None:
            QMessageBox.about(self, 'Info', 'Import file trước nha bạn')
            return

        if self.comboBoxQA.currentIndex() == 0:
            obj = self.df

        elif self.comboBoxQA.currentIndex() == 1:
            today = date.today()
            yearCurrent = today.strftime('%Y')
            tuoiBox = self.dialogBirthBox()
            tuoiDf = cp.deepcopy(self.df)
            for dateIdx in tuoiDf['Ngày Sinh']:
                date_transfer_df = datetime.strptime(dateIdx, '%d/%m/%Y')
                year_df = date_transfer_df.strftime('%Y')
                tuoiPlayer = int(yearCurrent) - int(year_df)
                if tuoiPlayer > tuoiBox:
                    result.append(True)
                else:
                    result.append(False)
            tuoiDf['result'] = result
            tuoiDf = tuoiDf[tuoiDf['result'] == True]
            obj = tuoiDf.drop(columns='result')

        elif self.comboBoxQA.currentIndex() == 2:
            posTeamDf = cp.deepcopy(self.df)
            self.dialog = inputPosClub(option=2)
            if self.dialog.exec_():
                pos, club = self.dialog.getInputs()
                posTeamDf = posTeamDf[posTeamDf['Vị Trí'] == pos]
                posTeamDf = posTeamDf[posTeamDf['Câu Lạc Bộ'] == club]

            obj = posTeamDf

        else:
            return

        if obj is None:
            return

        self.secondWindows = MainWindow.displayWindows(obj)
        self.secondWindows.show()
        return

    def dialogBirthBox(self):
        number, result = QInputDialog.getInt(self, "Input Dialog", "Nhập số tuổi: ")
        self.showMsgInput(result)
        return number

    def quit_message(self, event):
        reply = QMessageBox.question(
            self, "Cảnh Báo",
            "Bạn có thực sự muốn thoát? Vui lòng lưu trước khi thoát.",
            QMessageBox.Save | QMessageBox.Close | QMessageBox.Cancel,
            QMessageBox.Save)

        if reply == QMessageBox.Close:
            app.quit()
        elif reply == QMessageBox.Save:
            errFlag = self.export_db_file()
            if errFlag is not True:
                app.quit()
        else:
            pass

    def graph_chart(self):
        if self.table.rowCount() == 0:
            QMessageBox.warning(self, "Error", "Không có dữ liệu để vẽ biểu đồ")
            return
        clubDialog = inputPosClub(option=1)
        if clubDialog.exec_():
            nameDoiTuyen = clubDialog.getInputs()

        series = QPieSeries()
        chart = QChart()
        chart.setTitle('Số lượng vị trí cầu thủ của đội tuyển ' + nameDoiTuyen)
        header_font = QFont('Sergoe UI', 11)
        header_font.setWeight(QFont.Bold)
        chart.setTitleFont(header_font)
        chart.setAnimationOptions(QChart.SeriesAnimations)
        chart.legend().setAlignment(Qt.AlignTop)
        chart.setBackgroundVisible(True)

        for viTri in self.lstViTri:
            count = 0
            for i in range(self.table.rowCount()):
                if self.table.item(i, 3).text() == nameDoiTuyen:
                    if self.table.item(i, 2).text() == viTri:
                        count += 1
            # series.append(viTri, count)
            _slice = QPieSlice(viTri, count)
            series.append(_slice)

        series.setLabelsVisible(True)
        series.setLabelsPosition(QPieSlice.LabelOutside)
        for eachSlice in series.slices():
            eachSlice.setLabel("{:.2f}%".format(100 * eachSlice.percentage()))

        chart.addSeries(series)
        for i in range(len(self.lstViTri)):
            chart.legend().markers(series)[i].setLabel(self.lstViTri[i])
        self.chartView.setChart(chart)

    def export_db_file(self):
        flag_db_save = False
        try:
            if self.table.rowCount() > 0:
                my_dict = {self.table.horizontalHeaderItem(0).text(): [],
                           self.table.horizontalHeaderItem(1).text(): [],
                           self.table.horizontalHeaderItem(2).text(): [],
                           self.table.horizontalHeaderItem(3).text(): [],
                           self.table.horizontalHeaderItem(4).text(): []}

                for columnNumber in range(self.table.columnCount()):
                    for rowNumber in range(self.table.rowCount()):
                        my_dict[self.table.horizontalHeaderItem(columnNumber).text()].append(
                            self.table.item(rowNumber, columnNumber).text())
                df = pd.DataFrame(my_dict, columns=[self.table.horizontalHeaderItem(0).text(),
                                                    self.table.horizontalHeaderItem(1).text(),
                                                    self.table.horizontalHeaderItem(2).text(),
                                                    self.table.horizontalHeaderItem(3).text(),
                                                    self.table.horizontalHeaderItem(4).text()])

                currentPath = cp.deepcopy(self._path_file)
                if self._path_file is None:
                    if self.browsefname is not None:
                        currentPath = self.browsefname[0]

                if currentPath is None:
                    time_file = self.datetime()
                    f_name = "export_database" + time_file
                    ext = ".csv"
                    self._path_file = f_name + ext

                else:
                    answer_msg = QMessageBox.question(
                        self, "Save", "Bạn có muốn ghi đè file hiện tại không?",
                        QMessageBox.No | QMessageBox.Yes,
                        QMessageBox.No)

                    if answer_msg == QMessageBox.Yes:
                        self._path_file = currentPath

                df.to_csv(self._path_file, encoding='utf-8', index=False, header=True)
                flag_db_save = True

        finally:
            errFlag = self.showMsgSave(flag_db_save)

        return errFlag

    def export_img(self):
        flag_db_save = False
        try:
            if self.table.rowCount() > 0:
                filePath, _ = QFileDialog.getSaveFileName(self, "Save Image", "",
                                                          "PNG(*.png);;JPEG(*.jpg *.jpeg);;All Files(*.*) ")

                # if file path is blank return back
                if filePath == "":
                    return

                # saving canvas at desired path
                image = self.chartView.grab()
                image.save(filePath)
                flag_db_save = True
        finally:
            errFlag = self.showMsgSave(flag_db_save)

    def showMsgSave(self, flag=True):
        errFlag = False
        if flag:
            QMessageBox.about(self, "Save Complete", "Tập tin của bạn đã save hoàn tất.")
        else:
            errFlag = True
            QMessageBox.warning(self, "Error", "Không có gì để save hết bạn ơi !!!")

        return errFlag

    def showMsgInput(self, flag=True):
        errFlag = False
        if flag:
            QMessageBox.about(self, "Input Complete", "Bạn đã nhập xong")
        else:
            errFlag = True
            QMessageBox.warning(self, "Error", "Bạn chưa nhập gì")

        return errFlag

    def browseFile(self):
        fname, _ = QFileDialog.getOpenFileNames(self, 'Open File', self._path_file, 'All file (*.*)')
        if len(fname) == 0:
            if self.browsefname is None:
                QMessageBox.about(
                    self, "Cảnh Báo", "Không có file gì để chơi rồi bạn ơi !!!")
            return

        elif len(fname) != 0:
            if self.browsefname is not None and fname[0] == self.browsefname[0]:
                QMessageBox.about(self, "Info", "Already import this file")
            else:
                self.browsefname = fname
                self.df = pd.read_csv(self.browsefname[0], encoding='utf-8')
                # if answer_msg == QMessageBox.Yes:
                self.clear_all_db()
                self.loadFile(self.df)
                QMessageBox.about(self, "Info", "Import file complete")

    def loadFile(self, data):
        for rowNum in range(len(data)):
            self.table.insertRow(rowNum)
            for colNum in range(self.table.columnCount()):
                self.table.setItem(rowNum, colNum, QTableWidgetItem(str(data[self.lstLabel[colNum]][rowNum])))

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Football Manager Application"))
        self.buttonThem.setText(_translate("self", "Thêm"))
        self.buttonChinhSua.setText(_translate("self", "Sửa"))
        self.buttonXoaDuLieu.setText(_translate("self", "Xóa Database"))
        self.buttonVeBieuDo.setText(_translate("self", "Vẽ Biểu Đồ"))
        self.buttonThoat.setText(_translate("self", "Thoát"))
        self.buttonXuat.setText(_translate("self", "Xuất Dữ Liệu"))

        self.FirstAndLastName.setText(_translate("self", "Họ và tên"))
        self.BirthDayName.setText(_translate("self", "Ngày tháng năm sinh"))
        self.PositionName.setText(_translate("self", "Vị trí"))
        self.ClubName.setText(_translate("self", "Đội tuyển"))

        self.copyright.setText(_translate("self", "Copyright © 2021 by Hoa Nguyen | All Rights Reserved."))


class otherWindowDisplay(QAbstractTableModel):
    def __init__(self, datadf):
        super().__init__()
        self._datadf = datadf

    def rowCount(self, parent=None):
        return self._datadf.shape[0]

    def columnCount(self, parent=None):
        return self._datadf.shape[1]

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._datadf.iloc[index.row(), index.column()])
        return None

    def headerData(self, col, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self._datadf.columns[col]
        return None


class MainWindow(QMainWindow, MainDisplay):
    def __init__(self):
        super().__init__()
        subDisplay = MainDisplay()
        self.setWindowTitle('Football Manager Application')
        self.resize(1000, 820)

        # Menu Bar
        self.menuBar = self.menuBar()
        self.fileMenu = self.menuBar.addMenu('File')

        # export to csv file action
        exportDbAction = QAction('Export to CSV', self)
        exportDbAction.setShortcut('Ctrl+E')
        exportDbAction.triggered.connect(self.export_db_file)

        # export to csv file action
        exportImgAction = QAction('Export Image', self)
        exportImgAction.setShortcut('Ctrl+I')
        exportImgAction.triggered.connect(self.export_img)

        # exit action
        exitAction = QAction('Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(self.quit_message)

        self.fileMenu.addAction(exportImgAction)
        self.fileMenu.addAction(exportDbAction)
        self.fileMenu.addAction(exitAction)

        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHoiDap = QtWidgets.QMenu(self.menubar)
        self.menuHoiDap.setObjectName("menuHoiDap")
        self.menuBieuDo = QtWidgets.QMenu(self.menubar)
        self.menuBieuDo.setObjectName("menuBieuDo")
        self.menuTroGiup = QtWidgets.QMenu(self.menubar)
        self.menuTroGiup.setObjectName("menuTroGiup")
        self.setMenuBar(self.menubar)

        # Action Mở thêm xóa sửa
        self.actionMo = QtWidgets.QAction(self)

        self.actionThem = QtWidgets.QAction(self)
        self.actionThem.setEnabled(False)

        self.actionXoa = QtWidgets.QAction(self)

        self.actionSua = QtWidgets.QAction(self)
        self.actionSua.setEnabled(False)

        self.actionXuatHinh = QtWidgets.QAction(self)

        self.actionXuatDuLieu = QtWidgets.QAction(self)

        self.actionThoat = QtWidgets.QAction(self)

        self.actionCauHoi = QtWidgets.QAction(self)

        self.actionVeBieuDo = QtWidgets.QAction(self)

        self.actionLienHe = QtWidgets.QAction(self)

        self.menuFile.addAction(self.actionMo)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionThem)
        self.menuFile.addAction(self.actionSua)
        self.menuFile.addAction(self.actionXoa)
        self.menuFile.addAction(self.actionXuatHinh)
        self.menuFile.addAction(self.actionXuatDuLieu)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionThoat)

        self.menuHoiDap.addAction(self.actionCauHoi)

        self.menuBieuDo.addAction(self.actionVeBieuDo)

        self.menuTroGiup.addAction(self.actionLienHe)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHoiDap.menuAction())
        self.menubar.addAction(self.menuBieuDo.menuAction())
        self.menubar.addAction(self.menuTroGiup.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # tạo connection tới những chỗ ta click vào
        self.actionMo.triggered.connect(self.browseFile)
        self.actionThem.triggered.connect(self.add_entry)
        self.actionXoa.triggered.connect(self.clear_all_db)
        self.actionSua.triggered.connect(self.edit_database)
        self.actionThoat.triggered.connect(self.quit_message)
        self.actionCauHoi.triggered.connect(self.comboBox_QA)
        self.actionLienHe.triggered.connect(self.contact)
        self.actionVeBieuDo.triggered.connect(self.graph_chart)
        self.actionXuatHinh.triggered.connect(self.export_img)
        self.actionXuatDuLieu.triggered.connect(self.export_db_file)
        self.setCentralWidget(subDisplay)

    def displayWindows(self):
        model = otherWindowDisplay(self)
        view = QTableView()
        view.setModel(model)
        view.resize(510, 500)
        return view

    def contact(self):
        QMessageBox.about(self, 'Contact', "Football Manager là phần mềm quản lý cầu thủ\n"
                                            "Phần mềm đang trong giai đoạn thử nghiệm\n"
                                            "---------------------------------------------"
                                            "\nMọi chi tiết xin vui lòng liên hệ:"
                                            "\nThành viên dự án Football Manager:"
                                            "\n      Tên: Nguyễn Lê Minh Hòa"
                                            "\n      SĐT: 0944 886 896"
                                            )

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate

        self.menuFile.setTitle(_translate("self", "File"))
        self.menuHoiDap.setTitle(_translate("self", "Hỏi Đáp"))
        self.menuBieuDo.setTitle(_translate("self", "Biểu Đồ"))
        self.menuTroGiup.setTitle(_translate("self", "Trợ Giúp"))

        self.actionMo.setText(_translate("self", "Mở"))
        self.actionMo.setShortcut('Ctrl+O')

        self.actionThem.setText(_translate("MainWindow", "Thêm"))

        self.actionXoa.setText(_translate("self", "Xóa"))

        self.actionSua.setText(_translate("self", "Sửa"))

        self.actionThoat.setText(_translate("self", "Thoát"))
        self.actionThoat.setShortcut('Ctrl+Q')

        self.actionCauHoi.setText(_translate("self", "Trả lời câu hỏi"))

        self.actionVeBieuDo.setText(_translate("self", "Vẽ Biểu Đồ"))

        self.actionXuatDuLieu.setText(_translate("self", "Lưu File"))

        self.actionXuatHinh.setText(_translate("self", "Lưu Hình"))

        self.actionLienHe.setText(_translate("self", "Liên hệ"))


class inputPosClub(QDialog, defaultLst):
    def __init__(self, option=0, parent=None):
        super().__init__()
        self.pos = QComboBox()
        self.pos.addItems(self.lstViTri)
        self.club = QComboBox()
        self.club.addItems(self.lstDoiTuyen)
        self.option = option
        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, self)

        layout = QFormLayout(self)
        if option == 0:
            layout.addRow("Vị Trí", self.pos)
        elif option == 1:
            layout.addRow("Đội Tuyển", self.club)
        else:
            layout.addRow("Vị Trí", self.pos)
            layout.addRow("Đội Tuyển", self.club)
        layout.addWidget(buttonBox)

        buttonBox.accepted.connect(self.accept)
        buttonBox.rejected.connect(self.reject)

    def getInputs(self):
        if self.option == 0:
            return self.pos.currentText()
        elif self.option == 1:
            return self.club.currentText()
        else:
            return self.pos.currentText(), self.club.currentText()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    main.show()

    sys.exit(app.exec_())
