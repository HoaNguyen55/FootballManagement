# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo_football_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import Qt
from PyQt5.QtChart import QChart, QChartView, QPieSeries
import matplotlib.pyplot as plt


class DataEntryForm(QWidget):
    def __init__(self):
        super().__init__()
        self.items = 0

        self._data = {}

        # left side
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(('Họ và Tên', 'Ngày Sinh', 'Vị Trí', 'Câu Lạc Bộ', 'Số Áo'))
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.layoutRight = QVBoxLayout()
        self.layoutLeft = QHBoxLayout()

        # chart widget
        self.chartView = QChartView()
        self.chartView.setRenderHint(QPainter.Antialiasing)

        # Thông tin cầu thủ
        self.lineEditName = QLineEdit()
        self.lineEditBirth = QDateEdit()
        self.lineEditPosition = QLineEdit()
        self.lineEditClub = QLineEdit()
        self.lineEditNumber = QLineEdit()

        # Các chức năng
        self.buttonAdd = QPushButton('Thêm')
        self.buttonClear = QPushButton('Xóa')
        self.buttonEdit = QPushButton('Chỉnh sửa')
        self.buttonQuit = QPushButton('Thoát')
        self.buttonPlot = QPushButton('Vẽ biểu đồ')

        # Set button Thêm = False, để user nhập đầy đủ thông tin mới cho nhấn vào
        self.buttonAdd.setEnabled(False)

        # Khoảng cách giữa các khung nhập
        self.layoutRight.setSpacing(5)

        # Khung nhập thông tin
        # Họ Tên
        self.layoutRight.addWidget(QLabel('Họ và Tên'))
        self.layoutRight.addWidget(self.lineEditName)
        self.lineEditName.setMaxLength(50)
        # Năm Sinh
        self.layoutRight.addWidget(QLabel('Năm Sinh'))
        self.layoutRight.addWidget(self.lineEditBirth)
        self.lineEditBirth.setDisplayFormat("dd/MM/yyyy")
        self.lineEditBirth.setCalendarPopup(True)
        # Vị Trí
        self.layoutRight.addWidget(QLabel('Vị Trí'))
        self.layoutRight.addWidget(self.lineEditPosition)
        self.lineEditPosition.setMaxLength(20)
        # Câu Lạc Bộ
        self.layoutRight.addWidget(QLabel('Câu Lạc Bộ'))
        self.layoutRight.addWidget(self.lineEditClub)
        self.lineEditClub.setMaxLength(50)
        # Số áo
        self.layoutRight.addWidget(QLabel('Số Áo Thi Đấu'))
        self.layoutRight.addWidget(self.lineEditNumber)
        self.lineEditNumber.setValidator(QIntValidator())
        self.lineEditNumber.setMaxLength(2)

        # Nút nhấn lựa chọn chức năng
        self.layoutRight_AddClear = QHBoxLayout()
        self.layoutRight_AddClear.addWidget(self.buttonAdd)
        self.layoutRight_AddClear.addWidget(self.buttonClear)
        self.layoutRight_PlotQuit = QHBoxLayout()
        self.layoutRight_PlotQuit.addWidget(self.buttonPlot)
        self.layoutRight_PlotQuit.addWidget(self.buttonQuit)

        self.layoutRight.addLayout(self.layoutRight_AddClear)
        self.layoutRight.addLayout(self.layoutRight_PlotQuit)

        self.layoutRight.addWidget(self.chartView)

        self.layoutLeft.addWidget(self.table, 40)
        self.layoutLeft.addLayout(self.layoutRight, 20)
        self.setLayout(self.layoutLeft)

        self.buttonQuit.clicked.connect(self.quit_message)
        self.buttonClear.clicked.connect(self.reset_table)
        self.buttonPlot.clicked.connect(self.graph_chart)
        self.buttonAdd.clicked.connect(self.add_entry)

        self.lineEditName.textChanged[str].connect(self.check_disable)
        self.lineEditPosition.textChanged[str].connect(self.check_disable)
        self.lineEditClub.textChanged[str].connect(self.check_disable)
        self.lineEditNumber.textChanged.connect(self.check_disable)

        self.fill_table()

    def export_image(self):
        time_file = self.datetime()
        f_name = "export_image" + time_file
        ext = ".png"
        path_file = f_name + ext
        plt.savefig(path_file)

    def datetime(self):
        import datetime as dt
        time_zone = dt.datetime.now()
        current_time = (time_zone.strftime("%X")).replace(":", ".")
        time_file = time_zone.strftime("_%d-" + "%m-" + "%y_" + current_time)

        return time_file

    def edit_database(self):
        pass

    def check_disable(self):
        if self.lineEditName.text() and \
                self.lineEditPosition.text() and \
                self.lineEditClub.text() and \
                self.lineEditNumber.text():
            self.buttonAdd.setEnabled(True)
        else:
            self.buttonAdd.setEnabled(False)

    def fill_table(self, data=None):
        data = self._data if not data else data
        len(self._data)
        for name, birth, position, club, number in data.items():
            nameItem = QTableWidgetItem(name)
            nameItem.setTextAlignment(Qt.AlignLeft)

            birthItem = QTableWidgetItem(birth)
            birthItem.setTextAlignment(Qt.AlignCenter)

            positionItem = QTableWidgetItem(position)
            positionItem.setTextAlignment(Qt.AlignCenter)

            clubItem = QTableWidgetItem(club)
            clubItem.setTextAlignment(Qt.AlignCenter)

            numberItem = QTableWidgetItem(number)
            numberItem.setTextAlignment(Qt.AlignCenter)

            self.table.insertRow(self.items)
            self.table.setItem(self.items, 0, nameItem)
            self.table.setItem(self.items, 1, birthItem)
            self.table.setItem(self.items, 2, positionItem)
            self.table.setItem(self.items, 3, clubItem)
            self.table.setItem(self.items, 4, numberItem)
            self.items += 1

    def add_entry(self):
        name = self.lineEditName.text()
        birth = self.lineEditBirth.text()
        position = self.lineEditPosition.text()
        club = self.lineEditClub.text()
        number = self.lineEditNumber.text()

        try:
            # Add vào database table
            name = QTableWidgetItem(name)
            name.setTextAlignment(Qt.AlignCenter)
            birth = QTableWidgetItem('{}'.format(str(birth)))
            birth.setTextAlignment(Qt.AlignCenter)
            position = QTableWidgetItem(position)
            position.setTextAlignment(Qt.AlignCenter)
            club = QTableWidgetItem(club)
            club.setTextAlignment(Qt.AlignCenter)
            number = QTableWidgetItem(number)
            number.setTextAlignment(Qt.AlignCenter)

            # Thêm vào database table
            self.table.insertRow(self.items)
            self.table.setItem(self.items, 0, name)
            self.table.setItem(self.items, 1, birth)
            self.table.setItem(self.items, 2, position)
            self.table.setItem(self.items, 3, club)
            self.table.setItem(self.items, 4, number)
            self.items += 1

            self.lineEditName.setText('')
            self.lineEditPosition.setText('')
            self.lineEditClub.setText('')
            self.lineEditNumber.setText('')

        except ValueError:
            print("Something goes wrong")

    def reset_table(self):
        self.table.setRowCount(0)
        self.items = 0

        chart = QChart()
        self.chartView.setChart(chart)

    def quit_message(self):
        qmessage = QMessageBox.question(self, "Warning !!!", "Bạn có thực sự muốn thoát ?",
                                        QMessageBox.Yes | QMessageBox.No)
        if qmessage == QMessageBox.Yes:
            sys.exit()

    def graph_chart(self):
        series = QPieSeries()

        for i in range(self.table.rowCount()):
            text = self.table.item(i, 0).text()
            val = float(self.table.item(i, 1).text().replace('$', ''))
            series.append(text, val)

        chart = QChart()
        chart.addSeries(series)
        chart.legend().setAlignment(Qt.AlignTop)
        self.chartView.setChart(chart)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "Football Manager Application"))
        self.buttonThem.setText(_translate("self", "Thêm"))
        self.buttonChinhSua.setText(_translate("self", "Sửa"))
        self.buttonXoaDuLieu.setText(_translate("self", "Xóa Database"))
        self.buttonVeBieuDo.setText(_translate("self", "Vẽ Biểu Đồ"))
        self.buttonThoat.setText(_translate("self", "Thoát"))
        self.buttonXuat.setText(_translate("self", "Xuất Dữ Liệu"))

        self.FirstAndLastName.setText(_translate("self", "Họ và tên"))
        self.BirthDayName.setText(_translate("self", "Ngày tháng năm sinh"))
        self.PositionName.setText(_translate("self", "Vị trí"))
        self.ClubName.setText(_translate("self", "Đội tuyển"))

        self.copyright.setText(_translate("self", "Copyright © 2021 by Hoa Nguyen | All Rights Reserved."))

class MainWindow(QMainWindow):
    def __init__(self, w):
        super().__init__()

        self.setWindowTitle('Football Manager Application')
        self.resize(1200, 680)

        # Menu Bar
        self.menuBar = self.menuBar()
        self.fileMenu = self.menuBar.addMenu('File')

        # export to csv file action
        exportAction = QAction('Export to CSV', self)
        exportAction.setShortcut('Ctrl+E')
        exportAction.triggered.connect(self.export_to_csv)

        # exit action
        exitAction = QAction('Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(self.quit_message)

        self.fileMenu.addAction(exportAction)
        self.fileMenu.addAction(exitAction)

        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 880, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHoiDap = QtWidgets.QMenu(self.menubar)
        self.menuHoiDap.setObjectName("menuHoiDap")
        self.menuBieuDo = QtWidgets.QMenu(self.menubar)
        self.menuBieuDo.setObjectName("menuBieuDo")
        self.menuTroGiup = QtWidgets.QMenu(self.menubar)
        self.menuTroGiup.setObjectName("menuTroGiup")
        self.setMenuBar(self.menubar)
        # Action thêm xóa sửa
        self.actionThem = QtWidgets.QAction(self)
        self.actionThem.setObjectName("actionThem")
        self.actionXoa = QtWidgets.QAction(self)
        self.actionXoa.setObjectName("actionXoa")
        self.actionSua = QtWidgets.QAction(self)
        self.actionSua.setObjectName("actionSua")
        # Action copy/paste/save
        self.actionCopy = QtWidgets.QAction(self)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(self)
        self.actionPaste.setObjectName("actionPaste")
        self.actionSave = QtWidgets.QAction(self)
        self.actionSave.setObjectName("actionSave")
        # Action thoát
        self.actionThoat = QtWidgets.QAction(self)
        self.actionThoat.setEnabled(True)
        self.actionThoat.setObjectName("actionThoat")
        # Action câu hỏi
        self.actionCauHoi = QtWidgets.QAction(self)
        self.actionCauHoi.setObjectName("actionCauHoi")
        # Action vẽ biểu đồ
        self.actionVeBieuDo = QtWidgets.QAction(self)
        self.actionVeBieuDo.setObjectName("actionVeBieuDo")
        # Action xuất dữ liệu
        self.actionXuatDuLieu = QtWidgets.QAction(self)
        self.actionXuatDuLieu.setObjectName("actionXuatDuLieu")
        # Action liên hệ
        self.actionLienHe = QtWidgets.QAction(self)
        self.actionLienHe.setObjectName("actionLienHe")
        # Action thông tin phần mềm
        self.actionThongTinPhanMem = QtWidgets.QAction(self)
        self.actionThongTinPhanMem.setObjectName("actionThongTinPhanMem")

        # Trong menu, add các action bên trên
        # menu file
        self.menuFile.addAction(self.actionThem)
        self.menuFile.addAction(self.actionSua)
        self.menuFile.addAction(self.actionXoa)
        self.menuFile.addAction(self.actionCopy)
        self.menuFile.addAction(self.actionPaste)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionThoat)
        # menu hỏi đáp
        self.menuHoiDap.addAction(self.actionCauHoi)
        # menu biểu đồ
        self.menuBieuDo.addAction(self.actionVeBieuDo)
        # Menu trợ giúp
        self.menuTroGiup.addAction(self.actionLienHe)
        self.menuTroGiup.addAction(self.actionThongTinPhanMem)

        # Add action cho tiêu đề menu gồm File, hỏi đáp, biểu đồ và trợ giúp
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHoiDap.menuAction())
        self.menubar.addAction(self.menuBieuDo.menuAction())
        self.menubar.addAction(self.menuTroGiup.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # tạo connection tới những chỗ ta click vào
        self.actionThem.triggered.connect(lambda: self.clicked("Thêm was clicked"))
        self.actionXoa.triggered.connect(lambda: self.clicked("Xóa was clicked"))
        self.actionSua.triggered.connect(lambda: self.clicked("Sửa was clicked"))
        self.actionSave.triggered.connect(lambda: self.clicked("Save was clicked"))
        self.actionCopy.triggered.connect(lambda: self.clicked("Copy was clicked"))
        self.actionPaste.triggered.connect(lambda: self.clicked("Paste was clicked"))

        self.setCentralWidget(w)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate

        self.menuFile.setTitle(_translate("self", "File"))
        self.menuHoiDap.setTitle(_translate("self", "Hỏi Đáp"))
        self.menuBieuDo.setTitle(_translate("self", "Biểu Đồ"))
        self.menuTroGiup.setTitle(_translate("self", "Trợ Giúp"))

        self.actionThem.setText(_translate("self", "Thêm"))
        self.actionXoa.setText(_translate("self", "Xóa"))
        self.actionSua.setText(_translate("self", "Sửa"))
        self.actionCauHoi.setText(_translate("self", "Chọn câu hỏi"))
        self.actionVeBieuDo.setText(_translate("self", "Chọn Biểu Đồ"))
        self.actionXuatDuLieu.setText(_translate("self", "Xuất Dữ Liệu"))
        self.actionThoat.setText(_translate("self", "Thoát"))
        self.actionThoat.setShortcut('Ctrl+Q')
        self.actionThoat.triggered.connect(self.quit_message)

        self.actionLienHe.setText(_translate("self", "Liên hệ"))
        self.actionThongTinPhanMem.setText(_translate("self", "Thông tin phần mềm"))

        # Tạo shorcut action Thêm/Xóa/Sửa
        self.actionThem.setText(_translate("MainWindow", "Thêm"))
        self.actionThem.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionXoa.setText(_translate("MainWindow", "Xóa"))
        self.actionXoa.setShortcut(_translate("MainWindow", "Ctrl+D"))
        self.actionSua.setText(_translate("MainWindow", "Sửa"))
        self.actionSua.setShortcut(_translate("MainWindow", "Ctrl+E"))
        # Tạo shorcut action Copy/Paste/Save
        self.actionCopy.setText(_translate("MainWindow", "Sao Chép"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "Dán"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionSave.setText(_translate("MainWindow", "Lưu"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))

    def export_to_csv(self):
        import pandas as pd
        my_dict = {w.table.horizontalHeaderItem(0).text(): [],
                   w.table.horizontalHeaderItem(1).text(): [],
                   w.table.horizontalHeaderItem(2).text(): [],
                   w.table.horizontalHeaderItem(3).text(): []}
        for columnNumber in range(w.table.columnCount() - 1):
            for rowNumber in range(w.table.rowCount()):
                my_dict[w.table.horizontalHeaderItem(columnNumber).text()].append(
                    w.table.item(rowNumber, columnNumber).text())
        df = pd.DataFrame(my_dict, columns=[w.table.horizontalHeaderItem(0).text(),
                                            w.table.horizontalHeaderItem(1).text(),
                                            w.table.horizontalHeaderItem(2).text(),
                                            w.table.horizontalHeaderItem(3).text()])

        time_file = self.datetime()
        f_name = "export_database" + time_file
        ext = ".csv"
        path_file = f_name + ext

        df.to_csv(path_file, encoding='utf-8', index=False, header=True)

    def quit_message(self):
        qmessage = QMessageBox.question(self, "Warning !!!", "Bạn có thực sự muốn thoát ?",
                                        QMessageBox.Yes | QMessageBox.No)
        if qmessage == QMessageBox.Yes:
            sys.exit()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    w = DataEntryForm()
    main = MainWindow(w)
    main.show()

    sys.exit(app.exec_())
